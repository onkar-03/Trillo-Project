// LOGO
.logo {
  height: 3.25rem;
  margin-left: 2rem;
}

// SEARCH
.search {
  flex: 0 0 40%;

  // Centering icon inside the search bar
  display: flex;
  align-items: center;
  justify-content: center;

  @media only screen and (max-width: $bp-smallest) {
    order: 1;
    flex: 0 0 100%;
  }
  &__input {
    // font-family & font-size are not inherited by input elements
    // hence declaring it as inherit
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    padding: 0.7rem 2rem;
    border-radius: 100px;

    //To make the icon move inside the search bar
    margin-right: -3rem;

    // Width 90% of parents width
    width: 90%;
    transition: all 0.2s;

    // Increase Search bar width on focus
    &:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3);
    }

    &::-webkit-input-placeholder {
      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  // '+' Adjacent Sibling Selector
  // Changing the background color to same as that of the search icon when the search bar is focussed
  // Doing it separately as we want the color to change when the input field is focussed and not just the icon
  &__input:focus + &__button {
    background-color: var(--color-grey-light-3);
  }

  &__button {
    border: none;
    background-color: var(--color-grey-light-2);

    &:focus {
      outline: none;
    }
    &:active {
      transform: translateY(0.2rem);
    }
  }

  &__icon {
    // Formatting SVG Icons
    // Simply set the Height an Width
    height: 2rem;
    width: 2rem;

    // Changing Color of the SVG Icons
    fill: var(--color-grey-dark-3);
  }
}

// USER NAVIGATION
.user-nav {
  display: flex;
  justify-content: center;
  align-items: center;

  // Aligning the Items to take the full width of the container
  align-self: stretch;

  // Applying style to all the direct children of user-nav
  // & > * : means all the direct children of the user-nav
  & > * {
    padding: 0rem 2rem;
    cursor: pointer;

    // As the user-nav takes 100% of the width bcoz of stretch we want the items to to take the same width
    height: 100%;
  }
  & > *:hover {
    background-color: var(--color-grey-light-2);
  }

  &__icon-box {
    // Centering the Items vertically and horizontally
    display: flex;
    justify-content: center;
    align-items: center;

    // Relative parent positioning for notification
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width: 2.25rem;

    // Changing color fo the SVG Icons
    fill: var(--color-grey-dark-2);
  }

  &__notification {
    font-size: 0.8rem;
    width: 1.75rem;
    height: 1.75rem;
    border-radius: 100px;
    background-color: var(--color-primary);
    color: white;

    position: absolute;
    top: 1.5rem;
    right: 1.1rem;

    // Using flexbox to center the notification text as well
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &__user {
    // Centering the Items vertically and horizontally
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &__user-photo {
    height: 3.75rem;
    width: 3.75rem;
    margin-right: 1rem;
    border-radius: 50%;
  }
}

// SIDE NAVIGATION
.side-nav {
  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem;

  @media only screen and (max-width: $bp-medium) {
    display: flex;
    margin: 0;
  }

  &__item {
    position: relative;

    &:not(:last-child) {
      margin-bottom: 0.5rem;
    }
    @media only screen and (max-width: $bp-medium) {
      flex: 1;
    }
  }

  // Applying the hover effect on the navigation
  // Using the before pseudo element & absolute positioning
  // Initial scale in Y is 0
  &__item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 3px;
    background-color: var(--color-primary);
    transform: scaleY(0);

    // transition origin of animation default is center
    // transform-origin: bottom;

    // Animation
    // Adding delay of .2s for the width animation
    // Added a cubic bezier time function for the transition
    transition: transform 0.3s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,
      background-color 0.1s;
  }

  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1);
    width: 100%;
  }

  // Changing the color on active state
  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  &__link:link,
  &__link:visited {
    color: var(--color-grey-light-1);
    text-transform: uppercase;
    text-decoration: none;
    display: block;
    padding: 1.5rem 3rem;

    // Placing the Links above the sliding transition
    // Setting a z-index and it only applies when the position is specified
    z-index: 10;
    position: relative;

    // Centering the Text and the SVG Icons Vertically
    display: flex;
    align-items: center;

    @media only screen and (max-width: $bp-medium) {
      justify-content: center;
      padding: 2rem;
    }

    @media only screen and (max-width: $bp-small) {
      flex-direction: column;
      padding: 1.5rem 0.5rem;
    }
  }
  &__icon {
    width: 1.75rem;
    height: 1.75rem;
    margin-right: 2rem;
    // Current color states that the same color as that of the parent should be used
    // works the same way Just like inherit
    // Parent link color : grey-light-1
    fill: currentColor;

    @media only screen and (max-width: $bp-small) {
      margin-right: 0;
      margin-bottom: 0.7rem;
      width: 1.5rem;
      height: 1.5rem;
    }
  }
}

// LEGAL TEXT
.legal {
  font-size: 1.2rem;
  text-align: center;
  padding: 2.5rem;
  color: var(--color-grey-light-4);

  @media only screen and (max-width: $bp-medium) {
    display: none;
  }
}

// GALLERY
.gallery {
  display: flex;

  &__photo {
    width: 100%;
    flex-grow: 1;
    height: 32rem;
    width: 20rem;
    // To remove any white spaces between the images as block level elements dont allow other elements along their side horizontally
    // display: block;
  }
}

// OVERVIEW
.overview {
  display: flex;
  align-items: center;
  border-bottom: 1px solid var(--color-grey-light-2);
  &__heading {
    font-size: 2.25rem;
    font-weight: 300;
    letter-spacing: 0.1rem;
    padding: 1.5rem 3rem;
    text-transform: uppercase;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
      padding: 1.25rem 2rem;
    }
  }
  &__stars {
    // want the layout to have the stars close to the heading and the location at the extreme right
    // Using the Margin right trick to make the content take only the space required and also push the rest of the elements at the extreme right
    margin-right: auto;

    // SVG Stars have a default space at the bottom of them which needs to be nullified
    // Way 1 : assign them as flex
    // WAY 2 : line height and font-size as '0'
    display: flex;
  }
  &__icon-star,
  &__icon-location {
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
  }
  &__location {
    font-size: 1.2rem;
    display: flex;
    align-items: center;
  }

  &__icon-location {
    margin-right: 0.5rem;
  }

  &__rating {
    background-color: var(--color-primary);
    margin-left: 3rem;
    color: white;
    align-self: stretch;
    padding: 0 2.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;

    @media only screen and (max-width: $bp-small) {
      padding: 0 1.5rem;
    }
  }
  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300;
    margin-bottom: -0.3rem;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
    }
  }
  &__rating-count {
    font-size: 0.8rem;
    text-transform: uppercase;
    @media only screen and (max-width: $bp-small) {
      font-size: 0.5rem;
    }
  }
}

// BUTTON
.btn-inline {
  border: none;
  color: var(--color-primary);
  font-size: inherit;
  border-bottom: 1px solid currentColor;
  padding: 0.2rem;
  display: inline-block;
  background-color: transparent;
  cursor: pointer;
  transition: all 0.2s;

  & span {
    margin-left: 0.3rem;
    transition: margin-left 0.2s;
  }

  &:hover {
    color: var(--color-grey-dark-1);

    & span {
      margin-left: 0.8rem;
    }
  }

  &:focus {
    outline: none;
    // Infinite animation on focus mode
    animation: pulsate 1s infinite;
  }
}

// Animation on location focus
@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none;
  }

  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, 0.25);
  }

  100% {
    transform: scale(1);
    box-shadow: none;
  }
}

// PARAGRAPH

//Dont want the last paragraph to have the margin bottom
.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}
// LIST
.list {
  list-style: none;
  margin: 3rem 0;
  padding: 3rem 0;
  border-top: var(--line);
  border-bottom: var(--line);

  // Side by side elements
  display: flex;
  flex-wrap: wrap;

  &__item {
    //width 50% as we want two elements to be side by side
    flex: 0 0 50%;
    margin-bottom: 0.7rem;
  }

  // Including SVG Icons directly in CSS
  // Using  pseudo elements
  // we want a svg icon before every item
  &__item::before {
    content: '';

    //to format we need to set it inline-block
    display: inline-block;
    height: 1rem;
    width: 1rem;
    margin-right: 0.7rem;

    // Adding the icon
    // Older Browser Methods
    // ^ we cant change the color of the icon if we use the background-image property
    background-image: url(../img/chevron-thin-right.svg);
    background-size: cover;

    // Newer Browsers - masks
    // Here we declare a background color we require for the icon and then mask the background with the icon
    // So only the icon part is visible in teh required color

    // Improvised it saying if we can use mask in the browser only then implement this
    // Also uncommented the background-image code in case mask isn't supported the background-image one works fine
    @supports (-webkit-mask-image: url()) or (mask-image: url()) {
      background-color: var(--color-primary);
      mask-image: url(../img/chevron-thin-right.svg);
      mask-size: cover;

      //Setting background-image to none
      background-image: none;
    }
  }
}

//RECOMMEND
.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-2);

  display: flex;
  align-items: center;

  &__count {
    margin-right: auto;
  }

  &__friends {
    //In order to always display the photos of recommended peoples side by side
    display: flex;
  }

  &__photo {
    height: 4rem;
    width: 4rem;
    border-radius: 50%;
    border: 3px solid white;

    // we dont want the images to shrink on adding border .. hence here we want the box-sizing not to be border-box, but content-box
    box-sizing: content-box;

    &:not(:last-child) {
      margin-right: -2rem;
    }
  }
}

// REVIEWS
.review {
  background-color: white;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;

  //Relative position for quotation symbol of the review boxes
  position: relative;

  // To hide the overflowing quotation icon
  overflow: hidden;

  &__text {
    margin-bottom: 2rem;
    z-index: 10;
    position: relative;
  }
  &__user {
    display: flex;
    align-items: center;
  }
  &__photo {
    border-radius: 50%;
    height: 4.5rem;
    width: 4.5rem;
    margin-right: 1.5rem;
  }
  &__user-box {
    margin-right: auto;
  }
  &__user-name {
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: 0.4rem;
  }
  &__user-date {
    font: size 1rem;
    color: var(--color-grey-dark-3);
  }
  &__rating {
    color: var(--color-primary);
    font-size: 2.2rem;
  }

  //Adding quotation marks for the review boxes
  // Using HTML Entities
  &::before {
    content: '\201C';
    position: absolute;
    top: -2.75rem;
    left: -1rem;
    line-height: 1;
    font-size: 20rem;
    color: var(--color-grey-light-2);

    // Changing the font-family
    font-family: sans-serif;

    z-index: 1;
  }

  @media only screen and (max-width: $bp-medium) {
    padding: 2rem;
    margin-bottom: 3rem;
  }
}

// CALL TO ACTION
.cta {
  padding: 3rem 0;
  text-align: center;

  &__book-now {
    font-size: 2.2rem;
    font-weight: 300;
    text-transform: uppercase;
    margin-bottom: 2.5rem;
  }

  @media only screen and (max-width: $bp-medium) {
    padding: 2.5rem;
  }
}

.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border-radius: 100px;
  border: none;
  cursor: pointer;

  background-image: linear-gradient(
    to right,
    var(--color-primary-light),
    var(--color-primary-dark)
  );
  color: white;

  //relative position as for the invisible button text
  position: relative;

  // To hide the content thats outside the button in this case the invisible text
  overflow: hidden;

  & > * {
    height: 100%;
    width: 100%;

    //make it inline block to format
    display: inline-block;

    //Animation
    transition: all 0.2s;
  }

  &__visible {
    padding: 2rem 7.5rem;
    // position: absolute;
  }
  &__invisible {
    padding: 2rem 0;

    position: absolute;
    left: 0;

    // -100% means that the element moves just about the size of it only above the button in this case
    top: -100%;
  }

  &:hover {
    background-image: linear-gradient(
      to left,
      var(--color-primary-light),
      var(--color-primary-dark)
    );
  }
  &:hover &__invisible {
    top: 0;
  }

  &:hover &__visible {
    transform: translateY(100%);
  }

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }
}
